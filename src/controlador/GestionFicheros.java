/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package controlador;

import Excepciones.clienteExistente;
import Excepciones.clienteNoExistente;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfImage;
import com.itextpdf.text.pdf.PdfIndirectObject;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import modelo.Cliente;
import modelo.Factura;
import modelo.LineaFactura;
import modelo.Tienda;

/**
 *
 * @author mati
 */
public class GestionFicheros {

    public static File raiz;
    public static ArrayList<Tienda> listaTienda = new ArrayList<>();

    public static File getRaiz() {
        return raiz;
    }

    public static void setRaiz(File raiz) {
        GestionFicheros.raiz = raiz;
    }

    public static ArrayList<Tienda> getListaTienda() {
        return listaTienda;
    }

    public static void setListaTienda(ArrayList<Tienda> listaTienda) {
        GestionFicheros.listaTienda = listaTienda;
    }

    public void generarDocumentoFactura(Factura f) throws FileNotFoundException, DocumentException {
        Document document = new Document();
        PdfWriter.getInstance(document, new FileOutputStream("ReporteSinIMG.pdf"));
        document.open();
        añadirMetadata(document);

        añadirTituloPagina(document, f);
        añadirContenido(document, f);
        document.close();
        añadirImagen(document, new File("ReporteSinIMG.pdf"), new File("ReporteConIMG.pdf"), new File("125.png"));
    }

    public void añadirMetadata(Document doc) {
        doc.addTitle(listaTienda.get(0).getNombre());
        doc.addSubject(listaTienda.get(0).getDireccion());
        doc.addKeywords(listaTienda.get(0).getCIF());
        doc.addAuthor(listaTienda.get(0).getTelefono());
        doc.addAuthor(listaTienda.get(0).getWeb());
    }

    public void añadirTituloPagina(Document document, Factura f)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        añadirLineasVacias(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Tienda dedicada a la venta de componentes" + listaTienda.get(0).getNombre()));
        preface.add(new Paragraph(listaTienda.get(0).getDireccion() + " " + listaTienda.get(0).getTelefono() + " "));
        preface.add(new Paragraph(listaTienda.get(0).getWeb() + " " + "Contamos con " + listaTienda.get(0).getListaClientes().size() + " clientes satisfechos"));
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Factura generada por: " + System.getProperty("user.name") + ", el dia " + new Date()));//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$

        añadirLineasVacias(preface, 1);

        /*preface.add(new Paragraph(
                "This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-)."));
         */
        document.add(preface);
        //document.newPage();
    }

    public void añadirContenido(Document document, Factura f) throws DocumentException {
        Paragraph preface = new Paragraph();
        añadirLineasVacias(preface, 3);
        boolean primeraVez = true;
        //Crear tabla
        for (int i = 0; i < f.getListaLineas().size(); i++) {
            createTable(preface, primeraVez, f, i);
            primeraVez = false;
        }
        añadirLineasVacias(preface, 2);
        document.add(preface);

        Paragraph preface2 = new Paragraph();
        calcularResultadoYPDF(preface2, f);
        document.add(preface2);
    }

    public void createTable(Paragraph subCatPart, boolean primeraVez, Factura f, int i) throws BadElementException {
        //PdfPTable table = new PdfPTable(3);
        PdfPTable table = new PdfPTable(new float[]{20, 85, 20, 20});
        table.setWidthPercentage(100);
        LineaFactura lf = f.getListaLineas().get(i);
        if (primeraVez == true) {
            PdfPCell c1 = new PdfPCell(new Phrase("Codigo linea"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);

            c1 = new PdfPCell(new Phrase("Producto"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);

            c1 = new PdfPCell(new Phrase("Cantidad"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);

            c1 = new PdfPCell(new Phrase("Coste"));
            c1.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(c1);
            table.setHeaderRows(1);
        }
        String codLinea = "" + lf.getCodigoLinea();
        String cantidad = "" + lf.getCantidad();
        String coste = "" + lf.getCoste();
        table.addCell(codLinea);
        table.addCell(lf.getProducto().toString());
        table.addCell(cantidad);
        table.addCell(coste);

        subCatPart.add(table);

    }

    public void añadirLineasVacias(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

    public void añadirImagen(Document document, File source, File dest, File img) {
        try {
            PdfReader reader = new PdfReader(source.getAbsolutePath());
            PdfStamper stamer = new PdfStamper(reader, new FileOutputStream(dest.getAbsolutePath()));
            Image image = Image.getInstance(img.getAbsolutePath());
            PdfImage stream = new PdfImage(image, "", null);
            stream.put(new PdfName("ITXT_SpecialId"), new PdfName("123456789"));
            PdfIndirectObject ref = stamer.getWriter().addToBody(stream);
            image.setDirectReference(ref.getIndirectReference());
            image.setAbsolutePosition(450, 700);
            PdfContentByte over = stamer.getOverContent(1);
            over.addImage(image);
            stamer.close();
            reader.close();
        } catch (IOException ex) {
            Logger.getLogger(Tienda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(Tienda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void calcularResultadoYPDF(Paragraph subCatPart, Factura f) {
        double totalBruto = 0;
        double totalNeto = 0;
        double IVA = 1.21;
        double dtoVolumen = 0.98;
        double descuentos;
        double dtoProntoPago = 0.97;
        for (int i = 0; i < f.getListaLineas().size(); i++) {
            totalBruto += f.getListaLineas().get(i).getCoste();
        }
        if (f.getListaLineas().size() > 10) {
            totalNeto = (totalBruto * dtoProntoPago * dtoVolumen) * IVA;
            descuentos = (totalBruto * 0.02) + (totalBruto * 0.03);
        } else {
            totalNeto = (totalBruto * dtoProntoPago) * IVA;
            descuentos = (totalBruto * 0.03);
        }

        PdfPTable table = new PdfPTable(new float[]{20, 20, 20, 20});
        table.setWidthPercentage(100);

        PdfPCell c1 = new PdfPCell(new Phrase("Importe bruto"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Descuentos"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("IVA"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Importe neto"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        String importeBruto = "" + totalBruto;
        String descuentoStr = "" + descuentos;
        String IVAstr = "" + IVA;
        String importeNeto = "" + totalNeto;
        table.addCell(importeBruto);
        table.addCell(descuentoStr);
        table.addCell(IVAstr);
        table.addCell(importeNeto);
        subCatPart.add(table);
    }

    public static void generacionDeEstructurasBasicas() throws IOException {
        File rutaInicial = new File("tienda");
        if (!rutaInicial.exists()) {
            rutaInicial.mkdir();
        }
        File rutaClientes = new File("tienda/clientes");
        if (!rutaClientes.exists()) {
            rutaClientes.mkdir();
        }
        File rutaEmpleados = new File("tienda/empleados");
        if (!rutaEmpleados.exists()) {
            rutaEmpleados.mkdir();
        }
        File rutaFacturas = new File("tienda/facturas");
        if (!rutaFacturas.exists()) {
            rutaFacturas.mkdir();
        }
        File rutaFacturasCSV = new File("tienda/facturas/CSV");
        if (!rutaFacturasCSV.exists()) {
            rutaFacturasCSV.mkdir();
        }
        File rutaFacturasPDF = new File("tienda/facturas/PDF");
        if (!rutaFacturasPDF.exists()) {
            rutaFacturasPDF.mkdir();
        }

    }

    public static void altaCliente(Cliente c) throws IOException {
        File rutaInicial = new File("tienda/clientes");
        if (rutaInicial.exists()) {
            File ficheroCliente = new File(rutaInicial.getAbsolutePath() + "/" + c.getDni() + ".csv");
            ficheroCliente.createNewFile();
            PrintWriter pw = new PrintWriter(ficheroCliente);
            pw.print(c.formatear());
            pw.close();
        } else {
            System.out.println("No fueron inicializadas las rutas basicas, pruebe otra vez");
            try {
                generacionDeEstructurasBasicas();
            } catch (IOException ex) {
                Logger.getLogger(GestionFicheros.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public static void bajaCliente(Cliente c) {
        File rutaInicial = new File("tienda/clientes/" + c.getDni() + ".csv");
        if (rutaInicial.exists()) {
            System.out.println("eliminando ficheros...");
            rutaInicial.delete();
        } else {
            System.out.println("No fueron inicializadas las rutas basicas, pruebe otra vez");
            try {
                generacionDeEstructurasBasicas();
            } catch (IOException ex) {
                Logger.getLogger(GestionFicheros.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

}
